CREATE OR REPLACE PROCEDURE BL_CL.BL_DM_DDL_LOAD(IN with_drop BOOLEAN) AS
$load_dm_schema$
BEGIN
	IF with_drop IS TRUE THEN
		DROP SCHEMA IF EXISTS BL_DM CASCADE;
		CREATE SCHEMA BL_DM;
	END IF;
-- Create Time Dimension
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_TIME_DAY (
	  EVENT_DT 					DATE 				PRIMARY KEY,
	  EPOCH 						BIGINT 			NOT NULL,
	  DAY_NAME 					VARCHAR(20) 	NOT NULL,
	  DAY_OF_WEEK 				INT 				NOT NULL,
	  IS_WEEKEND 				BOOLEAN 			NOT NULL,
	  DAY_OF_MONTH 			INT 				NOT NULL,
	  DAY_OF_QUARTER 			INT 				NOT NULL,
	  DAY_OF_YEAR 				INT 				NOT NULL,
	  WEEK_OF_MONTH 			INT 				NOT NULL,
	  WEEK_OF_YEAR 			INT 				NOT NULL,
	  WEEK_OF_YEAR_ISO 		VARCHAR(10) 	NOT NULL,
	  "MONTH" 					INT 				NOT NULL,
	  MONTH_NAME 				VARCHAR(9) 		NOT NULL,
	  MONTH_NAME_CUT 			VARCHAR(3) 		NOT NULL,
	  "QUARTER" 				INT 				NOT NULL,
	  QUARTER_NAME 			VARCHAR(9) 		NOT NULL,
	  YEAR_ACTUAL 				INT 				NOT NULL,
	  FIRST_DAY_OF_WEEK 		DATE 				NOT NULL,
	  LAST_DAY_OF_WEEK 		DATE 				NOT NULL,
	  FIRST_DAY_OF_MONTH 	DATE 				NOT NULL,
	  LAST_DAY_OF_MONTH 		DATE 				NOT NULL,
	  FIRST_DAY_OF_QUARTER 	DATE 				NOT NULL,
	  LAST_DAY_OF_QUARTER 	DATE 				NOT NULL,
	  FIRST_DAY_OF_YEAR 		DATE 				NOT NULL,
	  LAST_DAY_OF_YEAR 		DATE 				NOT NULL,
	  MMYYYY 					VARCHAR(6) 		NOT NULL,
	  MMDDYYYY 					VARCHAR(10) 	NOT NULL
	);
-- CREATE Categories dimension:
	CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_DIM_CATEGORIES;
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_CATEGORIES (
		CATEGORY_SURR_ID 	INT 				PRIMARY KEY,
		CATEGORY_SRC_ID 	VARCHAR(100)	NOT NULL,
		CATEGORY_NAME 		VARCHAR(100)	NOT NULL,
		INSERT_DT 			DATE				NOT NULL,
		UPDATE_DT 			DATE				NOT NULL,
		SOURCE_SYSTEM 		VARCHAR(100)	NOT NULL,
		SOURCE_ENTITY 		VARCHAR(100)	NOT NULL
	);
	ALTER SEQUENCE BL_DM.SEQ_DIM_CATEGORIES OWNED BY BL_DM.DIM_CATEGORIES.CATEGORY_SURR_ID;
	INSERT INTO BL_DM.DIM_CATEGORIES
		SELECT -1, 'n.a.', 'n.a.', '1-1-1900'::DATE, '1-1-1900'::DATE, 'MANUAL', 'MANUAL'
		WHERE NOT EXISTS (SELECT 1 FROM BL_DM.dim_categories WHERE category_surr_id = -1);
-- CREATE Coupons dimension:
	CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_DIM_COUPONS;
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_COUPONS (
		COUPON_SURR_ID 	INT 				PRIMARY KEY,
		COUPON_SRC_ID 		VARCHAR(100)	NOT NULL,
		DISCOUNT_SIZE 		VARCHAR(5)		NOT NULL,
		INSERT_DT 			DATE				NOT NULL,
		UPDATE_DT 			DATE				NOT NULL,
		SOURCE_SYSTEM 		VARCHAR(100)	NOT NULL,
		SOURCE_ENTITY 		VARCHAR(100)	NOT NULL
	);
	ALTER SEQUENCE BL_DM.SEQ_DIM_COUPONS OWNED BY BL_DM.DIM_COUPONS.COUPON_SURR_ID;
	INSERT INTO BL_DM.DIM_COUPONS
		SELECT -1, 'n.a.', 'n.a.', '1-1-1900'::DATE, '1-1-1900'::DATE, 'MANUAL', 'MANUAL'
		WHERE NOT EXISTS (SELECT 1 FROM BL_DM.dim_coupons WHERE coupon_surr_id = -1);
	ALTER TABLE bl_dm.dim_coupons ADD CONSTRAINT UNIQUE_DIM_COUPON_SRC_ID UNIQUE (coupon_src_id);
-- CREATE Payment Methods dimension:
	CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_DIM_PAYMENT_METHODS;
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_PAYMENT_METHODS (
		PAYMENT_METHOD_SURR_ID 		INT 				PRIMARY KEY,
		PAYMENT_METHOD_SRC_ID 		VARCHAR(100)	NOT NULL,
		PAYMENT_METHOD_NAME	 		VARCHAR(100)	NOT NULL,
		INSERT_DT 						DATE				NOT NULL,
		UPDATE_DT 						DATE				NOT NULL,
		SOURCE_SYSTEM 					VARCHAR(100)	NOT NULL,
		SOURCE_ENTITY 					VARCHAR(100)	NOT NULL
	);
	ALTER SEQUENCE BL_DM.SEQ_DIM_PAYMENT_METHODS OWNED BY BL_DM.DIM_PAYMENT_METHODS.PAYMENT_METHOD_SURR_ID;
	INSERT INTO BL_DM.DIM_PAYMENT_METHODS
		SELECT -1, 'n.a.', 'n.a.', '1-1-1900'::DATE, '1-1-1900'::DATE, 'MANUAL', 'MANUAL'
		WHERE NOT EXISTS (SELECT 1 FROM BL_DM.dim_payment_methods WHERE payment_method_surr_id = -1);
-- CREATE Stores dimension:
	CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_DIM_STORES;
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_STORES (
		STORE_SURR_ID 			INT 				PRIMARY KEY,
		STORE_SRC_ID 			VARCHAR(100)	NOT NULL,
		STORE_NAME	 			VARCHAR(100)	NOT NULL,
		STORE_LOCATION_LAT	NUMERIC			NOT NULL,
		STORE_LOCATION_LONG	NUMERIC			NOT NULL,
		STORE_COMPANY_ID		INT				NOT NULL,
		STORE_COMPANY_NAME	VARCHAR(100)	NOT NULL,
		STORE_DISTRICT_ID 	INT				NOT NULL,
		STORE_DISTRICT_NAME	VARCHAR(100)	NOT NULL,
		INSERT_DT 				DATE				NOT NULL,
		UPDATE_DT 				DATE				NOT NULL,
		SOURCE_SYSTEM 			VARCHAR(100)	NOT NULL,
		SOURCE_ENTITY 			VARCHAR(100)	NOT NULL
	);
	ALTER SEQUENCE BL_DM.SEQ_DIM_STORES OWNED BY BL_DM.DIM_STORES.STORE_SURR_ID;
	INSERT INTO BL_DM.DIM_STORES
		SELECT -1, 'n.a.', 'n.a.', -1, -1, -1, 'n.a.', -1, 'n.a.', '1-1-1900'::DATE, '1-1-1900'::DATE, 'MANUAL', 'MANUAL'
		WHERE NOT EXISTS (SELECT 1 FROM BL_DM.dim_stores WHERE store_surr_id = -1);
-- CREATE Customers dimension:
	CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_DIM_CUSTOMERS_SCD;
	CREATE TABLE IF NOT EXISTS BL_DM.DIM_CUSTOMERS_SCD (
		CUSTOMER_SURR_ID 	INT 					PRIMARY KEY,
		CUSTOMER_SRC_ID 	VARCHAR(100)		NOT NULL,
		CUSTOMER_NAME 		VARCHAR(100)		NOT NULL,
		CUSTOMER_GENDER	VARCHAR(10)			NOT NULL,
		CUSTOMER_AGE		SMALLINT				NOT NULL,
		START_DT				DATE					NOT NULL,
		END_DT				DATE					NOT NULL,
		IS_ACTIVE			VARCHAR(1)			NOT NULL,
		INSERT_DT 			DATE					NOT NULL,
		SOURCE_SYSTEM 		VARCHAR(100)		NOT NULL,
		SOURCE_ENTITY 		VARCHAR(100)		NOT NULL
	);
	ALTER SEQUENCE BL_DM.SEQ_DIM_CUSTOMERS_SCD OWNED BY BL_DM.DIM_CUSTOMERS_SCD.CUSTOMER_SURR_ID;
	INSERT INTO BL_DM.DIM_CUSTOMERS_SCD
		SELECT -1, -1, 'n.a.', 'n.a.', -1, '31-12-9999'::DATE, '1-1-1900'::DATE, 'Y', '1-1-1900'::DATE,  'MANUAL', 'MANUAL'
		WHERE NOT EXISTS (SELECT 1 FROM BL_DM.dim_customers_scd WHERE customer_surr_id = -1);
-- CREATE Sales fact table:
	CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_FCT_SALES_MINUTES;
	CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES_MINUTES (
		EVENT_DT 						DATE				NOT NULL,
		EVENT_MINUTES 					INT				NOT NULL, 
		SALE_SURR_ID 					INT 				NOT NULL,
		CUSTOMER_SURR_ID 				INT 				NOT NULL,
		STORE_SURR_ID 					INT 				NOT NULL,
		COUPON_SURR_ID					INT 				NOT NULL,
		CATEGORY_SURR_ID 				INT 				NOT NULL,
		PAYMENT_METHOD_SURR_ID 		INT 				NOT NULL,
		QUANTITY_CNT 					SMALLINT 		NOT NULL,
		FCT_PRICE_LIRAS 				NUMERIC,
		FCT_DISCOUNT_LIRAS 			NUMERIC,
		FCT_COST_LIRAS 				NUMERIC,
		FCT_REVENUE_LIRAS 			NUMERIC,
		FCT_PAYMENT_AMOUNT_LIRAS 	NUMERIC,
		INSERT_DT 						DATE 				NOT NULL,
		SALE_SRC_ID 					VARCHAR(100) 	NOT NULL,
		SOURCE_SYSTEM 					VARCHAR(100) 	NOT NULL,
		SOURCE_ENTITY 					VARCHAR(100) 	NOT NULL
	) PARTITION BY RANGE (EVENT_DT);
	ALTER SEQUENCE BL_DM.SEQ_FCT_SALES_MINUTES OWNED BY BL_DM.FCT_SALES_MINUTES.SALE_SURR_ID;
END;
$load_dm_schema$ LANGUAGE plpgsql; VOLATILE;

CALL BL_CL.BL_DM_DDL_LOAD(with_drop := FALSE);


